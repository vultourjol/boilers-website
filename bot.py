#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
from datetime import datetime
from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
from typing import Dict, Optional

# === –ù–ê–°–¢–†–û–ô–ö–ò ===

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

# === TELEGRAM –ù–ê–°–¢–†–û–ô–ö–ò (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ü–û–õ–ù–ò–¢–¨!) ===

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8202488658:AAEmLbY0ZFtUovO4vIPpExbsfkgIy9B2MEg')
CHAT_ID_CONSULTATIONS = os.getenv('CHAT_ID_CONSULTATIONS', '-4804285754')
CHAT_ID_ORDERS = os.getenv('CHAT_ID_ORDERS', '-4956599962')
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"


# === –§–£–ù–ö–¶–ò–ò –û–¢–ü–†–ê–í–ö–ò ===

def send_telegram_message(chat_id: str, message: str, parse_mode: str = "HTML") -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —á–∞—Ç"""
    try:
        payload = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': parse_mode
        }
        
        response = requests.post(TELEGRAM_API_URL, json=payload, timeout=10)
        response.raise_for_status()
        
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
        return True
        
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False


# === –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô ===

def format_consultation_message(data: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    
    message = f"""
üîî <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ</b>

üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {timestamp}

üë§ <b>–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ <b>–ò–º—è:</b> {data.get('firstName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ <b>–§–∞–º–∏–ª–∏—è:</b> {data.get('lastName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ <b>Email:</b> {data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}

üìù <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {data.get('source', '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí° <i>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!</i>
"""
    return message.strip()


def format_order_message(data: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞"""
    timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
    items_info = ""
    if data.get('items'):
        items_info = f"""
üõí <b>–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
{data.get('items', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}
"""
    
    message = f"""
üõçÔ∏è <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó</b>

üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {timestamp}

üë§ <b>–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ <b>–ò–º—è:</b> {data.get('firstName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ <b>–§–∞–º–∏–ª–∏—è:</b> {data.get('lastName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ <b>Email:</b> {data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}

üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
{data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
{items_info}
üí∞ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:</b> {data.get('total', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ö° <i>–û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∑–∞–∫–∞–∑ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!</i>
"""
    return message.strip()


# === WEBHOOK ENDPOINTS ===

@app.route('/webhook/consultation', methods=['POST'])
def handle_consultation():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ POST –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json()
        
        if not data:
            logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
            return jsonify({'status': 'error', 'message': 'No data provided'}), 400
        
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: {data}")
        
        required_fields = ['firstName', 'lastName', 'email', 'phone']
        missing_fields = [field for field in required_fields if not data.get(field)]
        
        if missing_fields:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
            return jsonify({
                'status': 'error', 
                'message': f'Missing required fields: {", ".join(missing_fields)}'
            }), 400
        
        message = format_consultation_message(data)
        success = send_telegram_message(CHAT_ID_CONSULTATIONS, message)
        
        if success:
            return jsonify({
                'status': 'success',
                'message': 'Consultation request sent to Telegram'
            }), 200
        else:
            return jsonify({
                'status': 'error',
                'message': 'Failed to send message to Telegram'
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {e}", exc_info=True)
        return jsonify({'status': 'error', 'message': str(e)}), 500


@app.route('/webhook/order', methods=['POST'])
def handle_order():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ POST –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json()
        
        if not data:
            logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫–∞–∑")
            return jsonify({'status': 'error', 'message': 'No data provided'}), 400
        
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑: {data}")
        
        required_fields = ['firstName', 'lastName', 'email', 'phone']
        missing_fields = [field for field in required_fields if not data.get(field)]
        
        if missing_fields:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
            return jsonify({
                'status': 'error',
                'message': f'Missing required fields: {", ".join(missing_fields)}'
            }), 400
        
        message = format_order_message(data)
        success = send_telegram_message(CHAT_ID_ORDERS, message)
        
        if success:
            return jsonify({
                'status': 'success',
                'message': 'Order sent to Telegram'
            }), 200
        else:
            return jsonify({
                'status': 'error',
                'message': 'Failed to send message to Telegram'
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        return jsonify({'status': 'error', 'message': str(e)}), 500


# === –°–õ–£–ñ–ï–ë–ù–´–ï ENDPOINTS ===

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return jsonify({
        'status': 'healthy',
        'service': 'HeatMax Pro Telegram Bot',
        'timestamp': datetime.now().isoformat()
    }), 200


@app.route('/', methods=['GET'])
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    return """
    <html>
        <head>
            <title>HeatMax Pro Telegram Bot</title>
            <style>
                body { font-family: Arial, sans-serif; max-width: 800px; margin: 50px auto; padding: 20px; }
                h1 { color: #9b8b4f; }
                .endpoint { background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 5px; }
                code { background: #e0e0e0; padding: 2px 5px; border-radius: 3px; }
            </style>
        </head>
        <body>
            <h1>ü§ñ HeatMax Pro Telegram Bot</h1>
            <p>–ë–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞ –∫–æ—Ç–ª–æ–≤ HeatMax Pro</p>
            
            <h2>üì° –î–æ—Å—Ç—É–ø–Ω—ã–µ Endpoints:</h2>
            
            <div class="endpoint">
                <strong>POST /webhook/consultation</strong><br>
                –ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            </div>
            
            <div class="endpoint">
                <strong>POST /webhook/order</strong><br>
                –ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
            </div>
            
            <div class="endpoint">
                <strong>GET /health</strong><br>
                –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
            </div>
            
            <h2>‚úÖ –°—Ç–∞—Ç—É—Å:</h2>
            <p style="color: green; font-weight: bold;">–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ</p>
        </body>
    </html>
    """


# === –ó–ê–ü–£–°–ö ===

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –¥–ª—è HeatMax Pro...")
    logger.info("üìç –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:5001")
    logger.info("‚úÖ –ß–∞—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π (–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è): -4804285754")
    logger.info("‚úÖ –ß–∞—Ç –∑–∞–∫–∞–∑–æ–≤ (–ó–∞–∫–∞–∑—ã): -4956599962")
    app.run(host='0.0.0.0', port=5001, debug=False)
